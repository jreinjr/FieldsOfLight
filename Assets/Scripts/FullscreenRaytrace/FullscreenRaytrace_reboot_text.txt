using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using TriangleNet.Meshing;

[ExecuteInEditMode]
[RequireComponent(typeof(Camera))]
[AddComponentMenu("Effects/Raytrace (Generic)")]
public class FullscreenRaytrace_reboot_text : SceneViewFilter {


    [SerializeField]
    private Shader _EffectShader;

    public Material EffectMaterial
    {
        get
        {
            if (!_EffectMaterial && _EffectShader)
            {
                _EffectMaterial = new Material(_EffectShader);
                _EffectMaterial.hideFlags = HideFlags.HideAndDontSave;
            }

            return _EffectMaterial;
        }
    }
    private Material _EffectMaterial;

    public Camera CurrentCamera
    {
        get
        {
            if (!_CurrentCamera)
                _CurrentCamera = GetComponent<Camera>();
            return _CurrentCamera;
        }
    }
    private Camera _CurrentCamera;



    [Range(0.0f, 180.0f)]
    public float fov = 90.0f;
    [Range(0.5f, 2.0f)]
    public float aspect = 1.0f;

    [Range(-0.01f, 0.01f)]
    public float nearClip = 0.3f;
    [Range(-10000.0f, 10000.0f)]
    public float farClip = 1000.0f;

    public Texture _rgb_tex;
    public Texture2D _z_tex;

    public Matrix4x4[] viewMatrices;
    public View[] viewArray;
    public Matrix4x4 projectionMatrix;
    public ComputeBuffer buffer;

    public struct View
    {
        public Matrix4x4 viewMatrix;
        public Vector2 viewUV;
    }

    public TextAsset csv;

    private Matrix4x4[] ParseCSV(TextAsset csv)
    {
        string[,] grid = CSVReader.SplitCsvGrid(csv.text);
        int width = grid.GetUpperBound(0);
        int height = grid.GetUpperBound(1);
        Matrix4x4[] output = new Matrix4x4[height];
        for (int i = 0; i < height; ++i)
        {
            for (int j = 0; j < 4; ++j)
            {
                for (int k = 0; k < 4; ++k)
                {
                    output[i][j, k] = float.Parse(grid[j * 4 + k, i]);
                }
            }
        }
        return output;
    }





    /// \brief Stores the normalized rays representing the camera frustum in a 4x4 matrix.  Each row is a vector.
    /// 
    /// The following rays are stored in each row (in eyespace, not worldspace):
    /// Top Left corner:     row=0
    /// Top Right corner:    row=1
    /// Bottom Right corner: row=2
    /// Bottom Left corner:  row=3

    private Matrix4x4 GetFrustrumCorners(Camera cam)
    {
        float camFov = cam.fieldOfView;
        float camAspect = cam.aspect;

        Matrix4x4 frustrumCorners = Matrix4x4.identity;

        // TODO: Does this assume landscape FOV? Does VR use portrait?
        float fovWHalf = camFov * 0.5f;

        float tan_fov = Mathf.Tan(fovWHalf * Mathf.Deg2Rad);

        Vector3 toRight = Vector3.right * tan_fov * camAspect;
        Vector3 toTop = Vector3.up * tan_fov;

        Vector3 topLeft = (-Vector3.forward - toRight + toTop);
        Vector3 topRight = (-Vector3.forward + toRight + toTop);
        Vector3 bottomRight = (-Vector3.forward + toRight - toTop);
        Vector3 bottomLeft = (-Vector3.forward - toRight - toTop);

        frustrumCorners.SetRow(0, bottomLeft);
        frustrumCorners.SetRow(1, bottomRight);
        frustrumCorners.SetRow(2, topLeft);
        frustrumCorners.SetRow(3, topRight);

        return frustrumCorners;
    }




        /// \brief Custom version of Graphics.Blit that encodes frustum corner indices into the input vertices.
        /// 
        /// In a shader you can expect the following frustum cornder index information to get passed to the z coordinate:
        /// Bottom Left vertex:     z=0, u=0, v=0
        /// Bottom Right vertex:    z=1, u=1, v=0
        /// Top Left vertex:        z=2, u=1, v=0
        /// Top Right vertex:       z=3, u=1, v=1
        /// 
        /// \warning You may need to account for flipped UVs on DirectX machines due to differing UV semantics
        ///          between OpenGL and DirectX.  Use the shader define UNITY_UV_STARTS_AT_TOP to account for this.

        static void CustomGraphicsBlit(RenderTexture source, RenderTexture destination, Material fxMaterial, int passNr)
    {
        RenderTexture.active = destination;

        fxMaterial.SetTexture("_MainTex", source);
        

        GL.PushMatrix();
        GL.LoadOrtho();  // Note: z value of vertices don't make a difference because we are using ortho projection

        fxMaterial.SetPass(passNr);

        GL.Begin(GL.TRIANGLE_STRIP);

        // Here, GL.MultitexCoord2(0, x, y) assigns the value (x, y) to the TEXCOORD0 slot in the shader.
        // GL.Vertex3(x,y,z) queues up a vertex at position (x, y, z) to be drawn.  Note that we are storing
        // our own custom frustum information in the z coordinate.
        GL.MultiTexCoord2(0, 0.0f, 0.0f);
        GL.Vertex3(0.0f, 0.0f, 0.0f); // BL

        GL.MultiTexCoord2(0, 1.0f, 0.0f);
        GL.Vertex3(1.0f, 0.0f, 1.0f); // BR

        GL.MultiTexCoord2(0, 0.0f, 1.0f);
        GL.Vertex3(0.0f, 1.0f, 2.0f); // TL

        GL.MultiTexCoord2(0, 1.0f, 1.0f);
        GL.Vertex3(1.0f, 1.0f, 3.0f); // TR


        GL.End();
        GL.PopMatrix();

    }

    private Mesh blendMesh;
    public IMesh mesh;

    public void buildBlendMesh(out IMesh mesh)
    {
        blendMesh = new Mesh();
        List<Vector2> points = new List<Vector2>();
        List<Vector3> vertices  = null;
        List<int> indices  = null;
        
        //Triangulation.triangulate(points, out indices, out vertices);
        Triangulation.structuredMesh(new Rect(-0.05f, 0, 1.1f, 1), 30, 30,out indices, out vertices, out mesh);

        Vector2[] uvs = new Vector2[vertices.Count];
        for (int i = 0; i < uvs.Length; i++)
        {
            uvs[i] = new Vector2(vertices[i].x, vertices[i].y);
        }

        /////////
        // DEBUG 
        /////////
        /*
        for (int i = 0; i < vertices.Count; i++)
        {
            vertices[i] = Camera.current.ViewportToWorldPoint(new Vector3(vertices[i].x, vertices[i].y, Camera.current.nearClipPlane));
        }
        */

        

        blendMesh.Clear();
        blendMesh.vertices = vertices.ToArray();

       
        blendMesh.triangles = indices.ToArray();
        blendMesh.uv = uvs;
        blendMesh.RecalculateNormals();

        //return mesh;
    }

    public void transformBlendMesh()
    {
        
        for (int j = 0; j < blendMesh.vertices.Length; j++)
        {
            Debug.Log("before" + blendMesh.vertices[j]);
            //blendMesh.vertices[j] = Camera.current.ViewportToWorldPoint(blendMesh.vertices[j]);
            Debug.Log("after" + blendMesh.vertices[j]);
        }

        //blendMesh.vertices[j] = Camera.current.WorldToViewportPoint(v);
    }

    public void updateBlendMesh(IMesh mesh)
    {
        List<Vector3> vertices = null;
        List<int> indices = null;

        
        //Triangulation.retriangulate(mesh, out indices, out vertices);
        blendMesh.Clear();
        blendMesh.vertices = vertices.ToArray();
        blendMesh.triangles = indices.ToArray();
        Vector2[] uvs = new Vector2[vertices.Count];
        for (int i = 0; i < uvs.Length; i++)
        {
            uvs[i] = new Vector2(vertices[i].x, vertices[i].y);
        }
        blendMesh.RecalculateNormals();
        //Debug.Log(vertices.ToArray()[0]); 
    }



    public JSON_ViewImport json;
    public int rows;
    public int cols;

    public float zOffset;
    public float zMult = 1;
    // Ratio between z texture aspect and camera aspect (for packed mipmaps)
    [Range(0.5f, 2.0f)]
    public float zTexAspect = 1.5f;
    public Vector2 zTextureRes = new Vector2(512, 512);

    public bool useDebugMatrix;
    public bool useDebugUV;
    public Vector3 debugpos;
    public Vector3 debugrot;
    public Vector3 debugscale;
    private Matrix4x4 debugmatrix;
    public bool useDebugView;
    [Range(0, 191)]
    public int debugView;
    [Range(1, 10000)]
    public int modelScale;

    [ExecuteInEditMode]
    private void Start()
    {
        buildBlendMesh(out mesh);
        //Debug.Log(vertices.ToArray()[0]);
        int numViews = rows * cols;

        viewArray = new View[numViews];

        Matrix4x4 nukeToUnity = new Matrix4x4();
        nukeToUnity.SetTRS(Vector3.zero, Quaternion.identity, new Vector3(-1, 1, 1));

        for (int i = 0; i < numViews; ++i)
        {
            Matrix4x4 viewMatrix = JSON_ViewImport.ParseJsonMatrix4x4(json.data.views[i].view_matrix);
           
            if (useDebugView) viewMatrix = viewMatrix = JSON_ViewImport.ParseJsonMatrix4x4(json.data.views[debugView].view_matrix);

            Matrix4x4 flippedMatrix = nukeToUnity * viewMatrix;
            Matrix4x4 invViewMatrix = flippedMatrix.inverse;
            viewArray[i].viewMatrix = invViewMatrix;
            if (useDebugMatrix) viewArray[i].viewMatrix = debugmatrix;
            viewArray[i].viewUV = JSON_ViewImport.ParseJsonVector2(json.data.views[i].uv);
            if (useDebugUV) viewArray[i].viewUV = new Vector2(0, 0);
            if (useDebugView)
            {
                viewArray[i].viewUV = JSON_ViewImport.ParseJsonVector2(json.data.views[debugView].uv);
            }
        }

        _zTexArray = createTextureArray();

        
         
    }

    void Update()
    {
        if (Application.isEditor && !Application.isPlaying && json == null)
        {
            Start();
        }

       
    }


    public Vector4 getPosFromMatrix(Matrix4x4 m)
    {
        return new Vector4(m[0,3], m[1,3], m[2,3], 1);
    }

    private void OnDrawGizmos()
    {
        int numViews = json.data.views.Count;
        
        Vector3 gizmoPos = new Vector3();
       
        for (int i = 0; i < numViews; ++i)
        {
            gizmoPos = getPosFromMatrix( JSON_ViewImport.ParseJsonMatrix4x4(json.data.views[i].view_matrix));
            // DEBUG
            // TODO: Find a more permanent/elegant solution. Nuke and Unity are opposite-handed (x is -x)
            gizmoPos.x *= -1;
            
   //         Gizmos.DrawSphere(gizmoPos, 0.001f);

            
        }
        Gizmos.color = Color.red;
        // DEBUG
        // TODO: Find a more permanent/elegant solution. Nuke and Unity are opposite-handed (x is -x)
        gizmoPos = getPosFromMatrix(JSON_ViewImport.ParseJsonMatrix4x4(json.data.views[debugView].view_matrix));
        gizmoPos.x *= -1;
  //      Gizmos.DrawSphere(gizmoPos, 0.005f);
    }

    private List<Vector4> getMipOffsets()
    {
        List<Vector4> packed = new List<Vector4>();
        List<Vector4> stacked = new List<Vector4>();

        // Packed version
        packed.Add(new Vector4(0, 0, 1, 1));
        packed.Add(new Vector4(0.6666667f, 0, 1, 1));
        packed.Add(new Vector4(0.6666667f, 0.5f, 1, 1));
        packed.Add(new Vector4(0.8333333f, 0.5f, 2, 2));
        packed.Add(new Vector4(0.6666667f, 0.75f, 4, 4));
        packed.Add(new Vector4(0.8333333f, 0.75f, 4, 4));
        packed.Add(new Vector4(0.9166667f, 0.75f, 8, 8));
        packed.Add(new Vector4(0.8333333f, 0.875f, 16, 16));
        packed.Add(new Vector4(0.9166667f, 0.875f, 32, 32));

        // Stacked version
        stacked.Add(new Vector4(0, 0, 1, 1));
        stacked.Add(new Vector4(0.6666667f, 0, 1, 1));
        stacked.Add(new Vector4(0.6666667f, 0.5f, 1, 1));
        stacked.Add(new Vector4(0.6666667f, 0.75f, 1, 1));
        stacked.Add(new Vector4(0.6666667f, 0.875f, 1, 1));
        stacked.Add(new Vector4(0.6666667f, 0.9375f, 1, 1));
        stacked.Add(new Vector4(0.6666667f, 0.96875f, 1, 1));
        stacked.Add(new Vector4(0.6666667f, 0.984375f, 1, 1));
        stacked.Add(new Vector4(0.6666667f, 0.9921875f, 1, 1));

        return stacked;

    }


    private Texture2DArray _zTexArray;
    private Texture2DArray createTextureArray()
    {
        Texture2D texAtlas = _z_tex;
        TextureFormat format = _z_tex.format;
        Texture2DArray tex2Darray = new Texture2DArray((int)zTextureRes.x, (int)zTextureRes.y, rows*cols, format, true);
        tex2Darray.filterMode = FilterMode.Point;
        int mip;  
        int view; 
        int srcX;
        int srcY;
        int srcWidth;
        int srcHeight;

        List<Vector4> mipOffsets = getMipOffsets();

        for (int i = 0; i < viewArray.Length; i++)
        {
            view = i;
            mip = 0;
            

            foreach (Vector4 m in mipOffsets)
            {
                srcX = (int)((viewArray[i].viewUV.x + m.x) * texAtlas.width);
                srcY = (int)((viewArray[i].viewUV.y + m.y) * texAtlas.height);
                srcWidth = (int)(zTextureRes.x / Mathf.Pow(2, (float)mip) * m.z);
                srcHeight = (int)(zTextureRes.y / Mathf.Pow(2, (float)mip) * m.w);

          //      Graphics.CopyTexture(texAtlas, 0, 0, srcX, srcY, srcWidth, srcHeight, tex2Darray, view, mip, 0, 0);
                Debug.Log(mip + " " + m.x + " " +  m.y);
                mip++;
            }
        }


        

        return tex2Darray;
    }

    [ImageEffectOpaque]
    private void OnRenderImage(RenderTexture source, RenderTexture destination)
    {
        

        if (!EffectMaterial)
        {
            Graphics.Blit(source, destination); // do nothing
            return;
        }

        // TODO: JSON VALUES ARE WRONG
        //fov = json.data.views[0].fov;
        //aspect = json.data.views[0].aspect;

        // Parse CSV for view matrices
        // viewMatrices = ParseCSV(csv);

        int numViews = json.data.views.Count;

        //if (useDebugView) numViews = 1;

        viewArray = new View[numViews];
        // Assume shared projection matrix for all views
        projectionMatrix = new Matrix4x4();
        projectionMatrix = Matrix4x4.Perspective(fov, aspect, nearClip, farClip);

        

        //////////////
        ////DEBUG
        //////////////
        debugmatrix = new Matrix4x4();
        debugmatrix.SetTRS(debugpos, Quaternion.Euler(debugrot), debugscale);
        debugmatrix = debugmatrix.inverse;

        Matrix4x4 nukeToUnity = new Matrix4x4();
        nukeToUnity.SetTRS(Vector3.zero, Quaternion.identity, new Vector3(-1, -1, 1));
       


        for (int i = 0; i < numViews; ++i)
        {
            Matrix4x4 viewMatrix = JSON_ViewImport.ParseJsonMatrix4x4(json.data.views[i].view_matrix);
            if (useDebugView) viewMatrix = viewMatrix = JSON_ViewImport.ParseJsonMatrix4x4(json.data.views[debugView].view_matrix);
            Vector3 viewPos = viewMatrix.GetColumn(3);
            viewMatrix.SetColumn(3, new Vector4(viewPos.x * modelScale, viewPos.y * modelScale, viewPos.z * modelScale, 1));
            Matrix4x4 flippedMatrix = nukeToUnity * viewMatrix;
            Matrix4x4 invViewMatrix = flippedMatrix.inverse;
            viewArray[i].viewMatrix = invViewMatrix;
            if (useDebugMatrix) viewArray[i].viewMatrix = debugmatrix;
            viewArray[i].viewUV = JSON_ViewImport.ParseJsonVector2(json.data.views[i].uv);
            if (useDebugUV) viewArray[i].viewUV = new Vector2(0, 0);
            // DEBUG
            if (useDebugView)
            {
                viewArray[i].viewUV = JSON_ViewImport.ParseJsonVector2(json.data.views[debugView].uv);
            }
            


        }

        // 16 floats for Matrix4x4 and 2 for UV
        buffer = new ComputeBuffer(numViews, sizeof(float) * 18, ComputeBufferType.Default);

        // Pass views array to compute buffer
        buffer.SetData(viewArray);

        if (EffectMaterial)
        {
            EffectMaterial.SetBuffer("_ViewBuffer", buffer);
            EffectMaterial.SetInt("_length", numViews);
            EffectMaterial.SetVector("_tilesize", new Vector2(1.0f / (float)cols, 1.0f / (float)rows));
            // pass tile count to shader
            // pass projection matrix to shader
            EffectMaterial.SetMatrix("_projectionMatrix", projectionMatrix);

            // pass cumulative v0 view and projection matrix to shader
            EffectMaterial.SetTexture("_rgb_tex", _rgb_tex);
            EffectMaterial.SetTexture("_z_tex", _z_tex);
        }

        // pass frustrum rays to shader
        EffectMaterial.SetMatrix("_FC", GetFrustrumCorners(CurrentCamera));
        // pass camera view/projection matrix, inverse view matrix and position to shader
        EffectMaterial.SetMatrix("_CameraInvViewMatrix", CurrentCamera.cameraToWorldMatrix);
        EffectMaterial.SetMatrix("_CameraViewMatrix", CurrentCamera.worldToCameraMatrix);
        EffectMaterial.SetVector("_CameraWS", CurrentCamera.transform.position);
        EffectMaterial.SetFloat("_zOffset", zOffset);
        EffectMaterial.SetFloat("_zMult", 1.0f / zMult);
        EffectMaterial.SetFloat("_zTexAspect", 1.0f / zTexAspect);
        EffectMaterial.SetVector("_zTextureSize", new Vector4(zTextureRes.x,zTextureRes.y, 1.0f/zTextureRes.x, 1.0f / zTextureRes.y));
        EffectMaterial.SetVectorArray("_mipOffsets", getMipOffsets());
        EffectMaterial.SetTexture("_zTexArray", _zTexArray);


        /////////
        // DEBUG
        /////////
        // CustomGraphicsBlit(source, destination, EffectMaterial, 0); // Replace Graphics.Blit with CustomGraphicsBlit
        Graphics.Blit(source, destination); // do nothing
        //return;

        GL.PushMatrix();
        GL.LoadOrtho();

        EffectMaterial.SetPass(0);
        if (blendMesh == null) buildBlendMesh(out mesh);
        
        Graphics.DrawMeshNow(blendMesh, Camera.current.transform.position, Camera.current.transform.rotation);
        GL.PopMatrix();

        buffer.Dispose();
    } 


}
